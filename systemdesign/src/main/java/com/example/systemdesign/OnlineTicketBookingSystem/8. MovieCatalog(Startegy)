interface Search {
    List<Movie> searchByTitle(String title);
    List<Movie> searchByLanguage(String language);
    List<Movie> searchByGenre(String genre);
    List<Movie> searchByReleaseDate(LocalDate releaseDate);
    List<Movie> searchByCity(String cityName);
}

class Catalog implements Search {
    private Map<String, List<Movie>> movieTitles;
    private Map<String, List<Movie>> movieLanguages;
    private Map<String, List<Movie>> movieGenres;
    private Map<LocalDate, List<Movie>> movieReleaseDates;
    private Map<String, List<Movie>> movieCities;
    private List<Movie> allMovies;
    
    public Catalog() {
        this.movieTitles = new HashMap<>();
        this.movieLanguages = new HashMap<>();
        this.movieGenres = new HashMap<>();
        this.movieReleaseDates = new HashMap<>();
        this.movieCities = new HashMap<>();
        this.allMovies = new ArrayList<>();
    }
    
    public void addMovie(Movie movie) {
        allMovies.add(movie);
        
        // Index by title
        movieTitles.computeIfAbsent(movie.getTitle().toLowerCase(), k -> new ArrayList<>()).add(movie);
        
        // Index by language
        movieLanguages.computeIfAbsent(movie.getLanguage().toLowerCase(), k -> new ArrayList<>()).add(movie);
        
        // Index by genre
        movieGenres.computeIfAbsent(movie.getGenre().toLowerCase(), k -> new ArrayList<>()).add(movie);
        
        // Index by release date
        movieReleaseDates.computeIfAbsent(movie.getReleaseDate(), k -> new ArrayList<>()).add(movie);
    }
    
    public void addMovieToCity(Movie movie, String cityName) {
        movieCities.computeIfAbsent(cityName.toLowerCase(), k -> new ArrayList<>()).add(movie);
    }
    
    @Override
    public List<Movie> searchByTitle(String title) {
        return movieTitles.getOrDefault(title.toLowerCase(), new ArrayList<>());
    }
    
    @Override
    public List<Movie> searchByLanguage(String language) {
        return movieLanguages.getOrDefault(language.toLowerCase(), new ArrayList<>());
    }
    
    @Override
    public List<Movie> searchByGenre(String genre) {
        return movieGenres.getOrDefault(genre.toLowerCase(), new ArrayList<>());
    }
    
    @Override
    public List<Movie> searchByReleaseDate(LocalDate releaseDate) {
        return movieReleaseDates.getOrDefault(releaseDate, new ArrayList<>());
    }
    
    @Override
    public List<Movie> searchByCity(String cityName) {
        return movieCities.getOrDefault(cityName.toLowerCase(), new ArrayList<>());
    }
    
    public List<Movie> getAllMovies() {
        return new ArrayList<>(allMovies);
    }
}