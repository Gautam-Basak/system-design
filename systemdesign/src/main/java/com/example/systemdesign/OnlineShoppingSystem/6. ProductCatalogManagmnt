// ProductCategory Class
class ProductCategory {
    private String name;
    private String description;
    
    public ProductCategory(String name, String description) {
        this.name = name;
        this.description = description;
    }
    
    // Getters
    public String getName() { return name; }
    public String getDescription() { return description; }
}

// ProductReview Class
class ProductReview {
    private int rating;
    private String review;
    private Member reviewer;
    private LocalDate reviewDate;
    
    public ProductReview(int rating, String review, Member reviewer) {
        this.rating = rating;
        this.review = review;
        this.reviewer = reviewer;
        this.reviewDate = LocalDate.now();
    }
    
    // Getters
    public int getRating() { return rating; }
    public String getReview() { return review; }
    public Member getReviewer() { return reviewer; }
}

// Product Class
class Product {
    private String productId;
    private String name;
    private String description;
    private double price;
    private ProductCategory category;
    private int availableItemCount;
    private Account seller;
    private List<ProductReview> reviews;
    
    public Product(String id, String name, String description, double price,
                   ProductCategory category, Account sellerAccount) {
        this.productId = id;
        this.name = name;
        this.description = description;
        this.price = price;
        this.category = category;
        this.availableItemCount = 0;
        this.seller = sellerAccount;
        this.reviews = new ArrayList<>();
    }
    
    public int getAvailableCount() {
        return availableItemCount;
    }
    
    public void updatePrice(double newPrice) {
        if (newPrice <= 0) {
            throw new IllegalArgumentException("Price must be positive");
        }
        this.price = newPrice;
        System.out.println("Price updated for " + name + ": $" + newPrice);
    }
    
    public void updateInventory(int quantity) {
        this.availableItemCount += quantity;
        System.out.println("Inventory updated for " + name + ": " + availableItemCount + " available");
    }
    
    public void addReview(ProductReview review) {
        reviews.add(review);
        System.out.println("Review added for " + name + ": " + review.getRating() + " stars");
    }
    
    // Getters
    public String getProductId() { return productId; }
    public String getName() { return name; }
    public double getPrice() { return price; }
    public ProductCategory getCategory() { return category; }
}