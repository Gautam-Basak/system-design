class Customer {
    private String name;
    private Address address;
    private String email;
    private String phone;
    private CustomerStatus status;
    private Card card;
    private Account account;
    
    public Customer(String name, Address address, String email, String phone, 
                   CustomerStatus status, Card card, Account account) {
        this.name = name;
        this.address = address;
        this.email = email;
        this.phone = phone;
        this.status = status;
        this.card = card;
        this.account = account;
    }
    
    public TransactionStatus makeTransaction(Transaction transaction) {
        if (status != CustomerStatus.ACTIVE) {
            System.out.println("Customer account is not active: " + status);
            return TransactionStatus.BLOCKED;
        }
        
        System.out.println("Customer " + name + " initiating transaction");
        return transaction.processTransaction();
    }
    
    public Address getBillingAddress() {
        return address;
    }
    
    // Getters
    public String getName() { return name; }
    public CustomerStatus getStatus() { return status; }
    public Card getCard() { return card; }
    public Account getAccount() { return account; }
}

class Card {
    private String cardNumber;
    private String customerName;
    private String cardExpiry;
    private int pin;
    
    public Card(String cardNumber, String customerName, String cardExpiry, int pin) {
        this.cardNumber = cardNumber;
        this.customerName = customerName;
        this.cardExpiry = cardExpiry;
        this.pin = pin;
    }
    
    public boolean verifyPIN(int inputPIN) {
        return this.pin == inputPIN;
    }
    
    public Address getBillingAddress() {
        // In real system, this would return customer's billing address
        return new Address("123 Main St", "New York", "NY", "10001", "USA");
    }
    
    // Getters
    public String getCardNumber() { return cardNumber; }
    public String getCustomerName() { return customerName; }
    public String getCardExpiry() { return cardExpiry; }
}

abstract class Account {
    protected String accountNumber;
    protected double totalBalance;
    protected double availableBalance;
    
    public Account(String accountNumber) {
        this.accountNumber = accountNumber;
        this.totalBalance = 0.0;
        this.availableBalance = 0.0;
    }
    
    public double getAvailableBalance() {
        return availableBalance;
    }
    
    public double getTotalBalance() {
        return totalBalance;
    }
    
    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= availableBalance) {
            availableBalance -= amount;
            totalBalance -= amount;
            System.out.println("Withdrawn: $" + amount + " from account: " + accountNumber);
            return true;
        }
        return false;
    }
    
    public boolean deposit(double amount) {
        if (amount > 0) {
            availableBalance += amount;
            totalBalance += amount;
            System.out.println("Deposited: $" + amount + " to account: " + accountNumber);
            return true;
        }
        return false;
    }
    
    public String getAccountNumber() {
        return accountNumber;
    }
}

class SavingAccount extends Account {
    private double withdrawLimit;
    private double dailyWithdrawn;
    
    public SavingAccount(double withdrawLimit) {
        super("SAV" + System.currentTimeMillis());
        this.withdrawLimit = withdrawLimit;
        this.dailyWithdrawn = 0.0;
        // Initial balance for demonstration
        this.availableBalance = 5000.0;
        this.totalBalance = 5000.0;
    }
    
    @Override
    public boolean withdraw(double amount) {
        if (dailyWithdrawn + amount > withdrawLimit) {
            System.out.println("Withdrawal limit exceeded. Daily limit: $" + withdrawLimit);
            return false;
        }
        
        if (super.withdraw(amount)) {
            dailyWithdrawn += amount;
            return true;
        }
        return false;
    }
    
    public void resetDailyWithdrawal() {
        dailyWithdrawn = 0.0;
    }
    
    public double getWithdrawLimit() {
        return withdrawLimit;
    }
}

class CheckingAccount extends Account {
    private String debitCardNumber;
    
    public CheckingAccount(String debitCardNumber) {
        super("CHK" + System.currentTimeMillis());
        this.debitCardNumber = debitCardNumber;
        // Initial balance for demonstration
        this.availableBalance = 3000.0;
        this.totalBalance = 3000.0;
    }
    
    public String getDebitCardNumber() {
        return debitCardNumber;
    }
}